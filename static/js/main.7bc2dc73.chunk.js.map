{"version":3,"sources":["components/Card/img/foward.png","components/Intro/index.js","components/Header/index.js","environments/index.js","models/authenticationData.js","services/base.service.js","services/card/marvel.service.js","services/notification.service.js","components/Card/index.js","views/home/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Intro","props","Background","className","alt","src","show","id","Header","onClick","window","location","reload","style","marginLeft","ENV","require","API_KEY","ts","Date","getTime","authenticationData","apikey","hash","crypto","createHash","update","digest","findRoute","apiName","BACKEND_ROUTES","find","route","url","notifier","message","console","log","BaseService","resourcePrefix","config","this","client","axios","create","Object","assign","timeout","baseURL","headers","interceptors","response","use","error","data","Promise","reject","request","params","defaults","get","toString","replace","getUrl","then","catch","enableGlobalErrorHandling","errorNotifier","MarvelService","nameToSearch","limit","offset","name","Toast","Swal","mixin","toast","position","showConfirmButton","timer","timerProgressBar","onOpen","addEventListener","stopTimer","resumeTimer","NotificationService","alert","info","text","fire","icon","title","googleImages","character","a","GoogleImages","localStorage","getItem","search","images","setItem","thumbnail","Card","characterService","notificationService","state","flip","setCharacter","characterName","characterSpecification","includes","substring","indexOf","specification","nameHaveSpecification","path","setState","extension","backgroundImage","fowardCard","display","React","Component","RANDOM_OFFSET","Math","floor","random","Search","type","onChange","onKeyPress","placeholder","Home","handleKeyPress","e","key","getCharacters","inputValue","onChangeInputSearch","target","value","getCharacterByName","charactersService","characters","isLoading","results","length","setTimeout","map","href","data-toggle","data-placement","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7bc2dc73.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/foward.710391ab.png\";","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nexport const Intro = (props) => {\r\n  const Background = () => {\r\n    return (\r\n      <>\r\n        <div className={\"overlay fade-out\"}></div>\r\n        <img\r\n          alt=\"marvel book animation\"\r\n          src=\"https://66.media.tumblr.com/tumblr_mbha9qWF401qcixnko4_500.gif\"\r\n        ></img>\r\n      </>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {props.show && // if show prop is true\r\n        <div id=\"intro\">\r\n          <Background></Background>\r\n        </div>\r\n      }\r\n    </>\r\n  );\r\n};\r\n","\r\nimport React from \"react\"\r\nimport \"./styles.css\";\r\nexport const Header = () => {\r\n    return (\r\n        <>\r\n            <header className=\"flex align-items-center justify-content-center\">  {/* bootstrap classes  */}\r\n                <h1 onClick={() => window.location.reload()}>MARVEL<span style={{ marginLeft: '-4px' }}>CARD</span></h1>  {/*correcting font by approaching the word \"card\" to \"marvel\" by 4px. in <h1> style.css this value is discounted from the background with padding-right = (padding-left -4px).*/}\r\n            </header>\r\n        </>\r\n    )\r\n}","const ENV = require('./env')\r\nexport default ENV","import crypto from \"crypto\";\r\n\r\n/* Marvel APIConfig Default */\r\nconst PRIV_KEY = \"b97b275f00c65061c1c548114ece8c741cf8a27f\";\r\nconst API_KEY = \"dbb258f56cf0e85ba0a3bcf608741b2c\";\r\nconst ts = new Date().getTime();\r\nconst hash = crypto\r\n  .createHash(\"md5\")\r\n  .update(ts + PRIV_KEY + API_KEY)\r\n  .digest(\"hex\");\r\n\r\nexport const authenticationData = {\r\n  apikey: API_KEY,\r\n  ts: ts,\r\n  hash: hash,\r\n};\r\n","import axios from \"axios\";\r\nimport ENV from \"@environments\";\r\nimport { authenticationData } from \"@models\";\r\n\r\nconst getUrl = (url) => (url ? `/${url.toString().replace(\"/\", \"\")}` : null);\r\nconst findRoute = (apiName) =>\r\n  ENV.BACKEND_ROUTES.find((route) => route.route === apiName)?.url;\r\nconst getData = (promise) =>\r\n  promise\r\n    .then((response) => response?.data)\r\n    .catch((error) => Promise.reject(error));\r\n\r\nlet notifier = (message) => {\r\n  console.log(message);\r\n};\r\n\r\nexport class BaseService {\r\n  constructor(apiName, resourcePrefix, config) {\r\n    this.client = axios.create(\r\n      Object.assign(\r\n        {},\r\n        {\r\n          timeout: 300000,\r\n          baseURL: findRoute(apiName) + (resourcePrefix || \"\"),\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        },\r\n        config\r\n      )\r\n    );\r\n    this.client.interceptors.response.use(\r\n      (response) => {\r\n        return response;\r\n      },\r\n      (error) => {\r\n        const message = error?.response?.data?.message;\r\n        notifier(\r\n          message ||\r\n            `Não conseguimos conexão com este domínio ${findRoute(apiName)}`\r\n        );\r\n        return Promise.reject(error);\r\n      }\r\n    );\r\n\r\n    this.client.interceptors.request.use(\r\n      (config) => {\r\n        config.params = {\r\n          ...config.params,\r\n          ...authenticationData,\r\n        };\r\n        return config;\r\n      },\r\n      (error) => {\r\n        return Promise.reject(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  baseUrl() {\r\n    return this.client.defaults.baseURL;\r\n  }\r\n\r\n  get(url, config) {\r\n    return getData(this.client.get(getUrl(url), config));\r\n  }\r\n}\r\n\r\nBaseService.enableGlobalErrorHandling = (errorNotifier) => {\r\n  notifier = errorNotifier;\r\n};\r\n","import { BaseService } from \"../base.service\";\r\nexport class MarvelService extends BaseService {\r\n  constructor() {\r\n    super(\"marvelAPI\");\r\n  }\r\n\r\n  get(url, nameToSearch, limit, offset) {\r\n    return super.get(url, {\r\n      params: {\r\n        ...(nameToSearch ? { name: nameToSearch } : {\r\n          limit: limit ? limit : \"6\",\r\n          offset: offset ? offset : \"0\",\r\n        }),\r\n      },\r\n    });\r\n  }\r\n}\r\n","import Swal from 'sweetalert2';\r\n\r\nconst Toast = Swal.mixin({\r\n  toast: true,\r\n  position: 'top-end',\r\n  showConfirmButton: false,\r\n  timer: 5000,\r\n  timerProgressBar: true,\r\n  onOpen: (toast) => {\r\n    toast.addEventListener('mouseenter', Swal.stopTimer)\r\n    toast.addEventListener('mouseleave', Swal.resumeTimer)\r\n  }\r\n})\r\n\r\nexport class NotificationService {\r\n\r\n  constructor() {\r\n    window.alert = message => this.info(message)\r\n  }\r\n\r\n  success(text) {\r\n    Toast.fire({\r\n      icon: 'success',\r\n      title: 'Ok!',\r\n      text\r\n    })\r\n  }\r\n\r\n  error(text) {\r\n    Toast.fire({\r\n      icon: 'error',\r\n      title: 'Ops!',\r\n      text\r\n    })\r\n  }\r\n\r\n  warn(text) {\r\n    Toast.fire({\r\n      icon: 'warning',\r\n      title: 'Atenção!',\r\n      text\r\n    })\r\n  }\r\n\r\n  info(text) {\r\n    Toast.fire({\r\n      icon: 'info',\r\n      title: 'Atenção!',\r\n      text\r\n    })\r\n  }\r\n\r\n}","import React from \"react\";\r\nimport { MarvelService } from \"@services\";\r\nimport { NotificationService } from \"@services\";\r\nimport \"./style.css\";\r\nimport fowardCard from './img/foward.png';\r\nconst googleImages = async (character) => {\r\n  const GoogleImages = require(\"google-images\");\r\n  const client = new GoogleImages(\r\n    \"002030015187931256738:ax9zxpfhrlg\",\r\n    \"AIzaSyB36V0LmV5pmwA7txME4McW8MLaKgeBOhM\"\r\n  );\r\n  if (localStorage.getItem(character.name) === null) { // If a character image is not fetched before\r\n    await client.search(character.name + \"marvel\").then((images) => { // get an image \r\n      localStorage.setItem(character.name, images[0].url); // and save it in the local storage\r\n    });\r\n  } else { // if the image was previously fetched,\r\n    character.thumbnail.src = localStorage.getItem(character.name); // just bring it from local storage to avoid exceeding google image request limit\r\n    return character;\r\n  }\r\n  return googleImages(character);\r\n};\r\n\r\nexport class Card extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.characterService = new MarvelService();\r\n    this.notificationService = new NotificationService();\r\n    this.state = {\r\n      character: false,\r\n      flip: props.flip ? props.flip : false\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setCharacter(this.props.character);\r\n  }\r\n\r\n  nameHaveSpecification(character) {\r\n    let characterName = character.name;\r\n    let characterSpecification = \"\";\r\n    if (characterName.includes(\"(\", \")\")) {\r\n      characterSpecification = characterName\r\n        .substring(characterName.indexOf(\"(\") + 1)\r\n        .replace(\")\", \"\"); // save specification without parentheses\r\n      characterName = characterName.substring(0, characterName.indexOf(\"(\")); //  remove specification  from character name\r\n      character.name = characterName;\r\n      character.specification = characterSpecification;\r\n      return character;\r\n    }\r\n    return character;\r\n  }\r\n\r\n  async setCharacter(character) {\r\n    if (character) {\r\n      if (this.nameHaveSpecification(character)) {\r\n        // if character name have specification\r\n        if (character.thumbnail.path.includes(\"image_not_available\")) {  // img character thumbnail is not available so get thumbnail from google images\r\n          googleImages(character).then(() => {\r\n            this.setState({ character: character });\r\n          });\r\n        } else {\r\n          character.thumbnail.src =\r\n            character.thumbnail.path + \".\" + character.thumbnail.extension;\r\n          this.setState({ character: character });\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n    const { character } = this.state;\r\n    const thumbnail = character.thumbnail;\r\n    const { flip } = this.state;\r\n\r\n    return (\r\n      <>\r\n        {character && (\r\n          <div\r\n            className={character ? \"card open-cards\" : \"card\"}\r\n            style={{\r\n              backgroundImage: (flip ? ('url(\"' + fowardCard + '\")') : ('url(\"' + thumbnail.src + '\")'))\r\n            }}\r\n            onClick={() => this.setState({ flip: !flip })}\r\n          >\r\n            <span style={{display: flip && 'none'}} className=\"id\">#{character.id}</span>\r\n            <h2 style={{display: flip && 'none'}}>{character.name}</h2>\r\n            {character.specification && ( // if character has specification show specification\r\n              <>\r\n                <h3 style={{display: flip && 'none'}}>{character.specification}</h3>\r\n              </>\r\n            )}\r\n          </div>\r\n        )\r\n        }\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\n/* Components */\r\nimport { Intro } from \"@components\";\r\nimport { Header } from \"@components\";\r\nimport { Card } from \"@components\";\r\n\r\n/* Services */\r\nimport { MarvelService } from \"@services\";\r\nimport { NotificationService } from \"@services\";\r\n\r\n/* View Style */\r\nimport \"./styles.css\";\r\n\r\nconst RANDOM_OFFSET = Math.floor(Math.random() * 1493);\r\nconst QTD_CHARACTERS = 4;\r\n\r\nconst Search = (props) => {\r\n  return (\r\n    <>\r\n      <div className=\"col-md-5 mt-3 mb-3\">\r\n        <div className=\"input-group\" id=\"search\">\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            onChange={props.onChange}\r\n            onKeyPress={props.onKeyPress}\r\n            placeholder=\"Find character\"\r\n          />\r\n          <div className=\"input-group-append\">\r\n            <button\r\n              className=\"btn text-light font-weight-bold\"\r\n              onClick={props.onClick}\r\n              type=\"button\"\r\n            >\r\n              <span>GO!</span>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport class Home extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.charactersService = new MarvelService();\r\n    this.notificationService = new NotificationService();\r\n\r\n    this.state = {\r\n      characters: [],\r\n      isLoading: true,\r\n      inputValue: false, // character name to search\r\n      flip: true,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getCharacters();\r\n  }\r\n\r\n  handleKeyPress = (e) => {\r\n    if (e.key === \"Enter\") {\r\n      this.getCharacters(this.state.inputValue);\r\n    }\r\n  };\r\n\r\n  onChangeInputSearch = (e) => {\r\n    this.setState({ inputValue: e.target.value });\r\n  };\r\n\r\n  getCharacterByName = () => {\r\n    this.getCharacters(this.state.inputValue);\r\n  };\r\n\r\n  async getCharacters(nameToSearch) {\r\n    try {\r\n      await this.charactersService\r\n        .get(\r\n          \"/characters\",\r\n          nameToSearch ? nameToSearch : \"\",\r\n          QTD_CHARACTERS,\r\n          RANDOM_OFFSET\r\n        )\r\n        .then(\r\n          (response) =>\r\n            response.data.results.length !== 0 //  if a result is found for the specific character\r\n              ? (this.setState({\r\n                characters: response.data.results,\r\n                flip: nameToSearch ? false : true, // if the card was fetched flip is false\r\n              })) /// set character\r\n              : (this.notificationService.error(\r\n                `Não foi possível encontrar o personagem! Verifique o nome e tente novamente.` // warns the user\r\n              )),\r\n          this.state.isLoading &&\r\n          setTimeout(() => {\r\n            this.setState({ isLoading: false });\r\n          }, 4000)\r\n        );\r\n    } catch (error) {\r\n      this.notificationService.error(\r\n        `Não foi possível obter a lista de personagens.`\r\n      );\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { characters } = this.state;\r\n    var { isLoading } = this.state;\r\n    var { flip } = this.state;\r\n    return (\r\n      <>\r\n        <Header></Header>\r\n        <Intro show={isLoading}></Intro>{\" \"}\r\n        {/* get characters is done? timeout end? remove intro */}\r\n        <section\r\n          id=\"home\"\r\n          className=\"justify-content-center align-items-center\"\r\n          style={{\r\n            display: isLoading\r\n              ? \"none\"\r\n              : \"flex\" /* loading done?? show home  */,\r\n          }}\r\n        >\r\n          <div className=\"container-fluid\">\r\n            <div className=\"row flex justify-content-center mb-3\">\r\n              <Search\r\n                onClick={this.getCharacterByName}\r\n                onKeyPress={this.handleKeyPress}\r\n                onChange={this.onChangeInputSearch}\r\n              ></Search>\r\n            </div>\r\n            <div className=\"row no-gutters flex justify-content-center\">\r\n              {characters.map((character, key) => (\r\n                <Card\r\n                  key={character.id}\r\n                  character={character}\r\n                  flip={flip}\r\n                ></Card>\r\n              ))}\r\n            </div>\r\n          </div>\r\n          <div className=\"footer-copyright text-right py-0\">\r\n            <a\r\n              href=\"https://jotanarciso.com/\"\r\n              target=\"blank\"\r\n              data-toggle=\"tooltip\"\r\n              data-placement=\"top\"\r\n              title=\"jotanarciso.com | desenvolvedor de experiências\"\r\n            >;</a\r\n            >\r\n          </div>\r\n        </section>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport { Home } from '@views'\n\n\nfunction App() {\n\n  return (\n    <>\n      <Home></Home>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css'; // bootstrap import\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}